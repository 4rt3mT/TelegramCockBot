import telebot;
import requests;
from random import randint,choice
from deep_translator import GoogleTranslator

from telebot import types
import sqlite3 
import csv
from time import sleep
import pymorphy2
from datetime import date, datetime, timedelta



bot = telebot.TeleBot('6054495160:AAF3k0Ye_u2P9iy3XtEwakl9Rhis-1buIFE')

con = sqlite3.connect("main.db",check_same_thread=False)
cur = con.cursor()
morph = pymorphy2.MorphAnalyzer()


def Inflect(word):
    return morph.parse(word)[0].inflect({'gent'}).word

def WomanOrMen(word):
    p = morph.parse(word)[0]

    lastChar = word[-1]
    if p.tag.gender == "femn":
        Sex = '–¢–≤–æ—è'
    elif p.tag.gender == "masc":
        Sex = '–¢–≤–æ–π'
    else:
        Sex = '–¢–≤–æ—ë'

    return Sex





ArrayOfDickNames = [
    "–ê–Ω–∞–∫–æ–Ω–¥–∞", 
    "–ë–∞–Ω–∞–Ω", 
    "–°—Ç–æ—è–∫", 
    "–°–æ—Å–∏—Å–∫–∞", 
    "–í—ã–ø—É–∫–ª–æ—Å—Ç—å", 
    "–î–∏–∫–∫–µ–Ω—Å", 
    "–î–∏–Ω—å-–¥–æ–Ω", 
    "–ü–∞–ª–æ—á–∫–∞", 
    "–≠–∫—Å–∫–∞–ª–∏–±—É—Ä",  
    "–§–∞—Å–æ–ª—å", 
    "–ö–æ—Ä–Ω–∏—à–æ–Ω", 
    "–ì–æ–ª–¥—Ñ–∏–Ω–≥–µ—Ä", 
    "–®–ª–∞–Ω–≥", 
    "–ú–æ–ª–æ—Ç–æ–∫", 
    "–î–∂–∏–º–º–∏", 
    "–î–∂–æ–Ω—Å–æ–Ω", 
    "–î–∂–æ–Ω—Å–æ–Ω", 
    "–î–∂–æ–π—Å—Ç–∏–∫", 
    "–ú–ª–∞–¥—à–∏–π", 
    "–ú—É—Å–æ—Ä", 
    "–†—É—á–∫–∞", 
    "–•–æ–±–≥–æ–±–ª–∏–Ω", 
    "–õ–µ—Ä–æ–π", 
    "–ü–∞—Ä–µ–Ω—å", 
    "–°—Ç–æ—è–∫", 
    "–ú–æ–ª–æ—Ç–æ–∫", 
    "–ì–µ—Ä–∫—É–ª–µ—Å", 
    "–î–∂–æ–π—Å—Ç–∏–∫", 
    "–ü–∞–ª–∫–∞", 
    "–£—á–∞—Å—Ç–Ω–∏–∫", 
    "–î–∏–∫", 
    "–í–µ–∑—É–≤–∏–π", 
    "–ü–∏—Ç", 
    "–ú–æ–Ω—Å—Ç—Ä", 
    "–ó–º–µ—è", 
    "–£–ø–∞–∫–æ–≤–∫–∞", 
    "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏", 
    "–û–≥—É—Ä–µ—Ü", 
    "–ü–æ—Ä—à–µ–Ω—å", 
    "–ó–∞–ª—É–ø–∞", 
    "–†–∞–∫–µ—Ç–∞", 
    "–≠—Å–∫–∏–º–æ",  
    "–ü–∏—Ç–æ–Ω", 
    "–°—Ç–µ—Ä–∂–µ–Ω—å", 
    "–°–∞–ª—è–º–∏", 
    "–ö–æ–ª–±–∞—Å–∞", 
    "–®–ª–∞–Ω–≥", 
    "–í–∞–ª", 
    "–ó–º–µ—è", 
    "–°—Ç–∏—Ñ—Ñ–∏", 
    "–ù–æ–≥–∞", 
    "–¢–æ—Ä", 
    "–°—Ç–≤–æ–ª", 
    "–¢—É–Ω–µ—Ü"
]

def plural_days(n):
    days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    
    if n % 10 == 1 and n % 100 != 11:
        p = 0
    elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        p = 1
    else:
        p = 2

    return str(n) + ' ' + days[p]

def getDickLenght(Value):
    if Value <= 0:
        dick = "<3"
        return dick
    elif Value <=10:
        dick = "<=3"
        return dick
    charCount = int(Value / 10)
    dick = "<" + "=" * charCount + "3"
    return dick

@bot.message_handler(commands=['start'])
def start_message(message):
    
    res = cur.execute("SELECT id FROM users WHERE id={0}".format(message.from_user.id))
    if res.fetchone() is not None:
        DickName = Inflect(choice(ArrayOfDickNames).lower())
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å {1}.".format(message.from_user,DickName))
    else:
        markup = types.ReplyKeyboardMarkup()
        #button1 = types.KeyboardButton("/dick")
        #markup.add(button1)
        Value = randint(1,15)
       

        
        dickString = getDickLenght(Value)
        

        cur.execute("""
            INSERT INTO users VALUES
                ({0}, {1}, "{2}","","","{3}",0,"{4}")
        """.format(message.from_user.id,Value,message.from_user.first_name, date.today(), date.today()))
        con.commit()
        DickName = choice(ArrayOfDickNames).lower()
        DickFullName = "–¢–≤–æ–π" +" "+ DickName    
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! {2} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {1}—Å–º".format(message.from_user,str(Value),DickFullName), reply_markup=markup)
        bot.send_message(message.chat.id, "–ß–ª–µ–Ω {0.first_name} –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n  {1}".format(message.from_user,dickString))

@bot.message_handler(commands=['topdicks'])
def start_message(message):
    res = cur.execute("SELECT id,value,name FROM users ORDER BY value DESC".format(message.from_user.id))
    result = res.fetchall()
    
    res2 = cur.execute("SELECT id,days,lastUpdate FROM topDudes ORDER BY days DESC LIMIT 1")
    result2 = res2.fetchone()
   
    if result is not None:
        stringOfDicks = ""
        first = True
        last = len(result)
        now = 1
        for Dick in result:
            
            if Dick[2] is None:
                Name = Dick[0]
            else:
                Name = Dick[2]
            if first:
                crown = "üëë"
                first = False
            else:
                crown = ""
            if now == last:
                crown = "üíÄ"
            
            if str(Dick[0]) == str(result2[0]):
                topName = Dick[2]
                top = " - " + plural_days(result2[1])

            
            stringOfDicks = stringOfDicks + crown  +str(Name) +crown + " - " + str(Dick[1]) + " —Å–º \n"
            now = now + 1
        
        bot.send_message(message.chat.id, stringOfDicks)
        #bot.send_message(message.chat.id, "üëë" +topName+ "üëë" + " –≤ —Ç–æ–ø–µ —É–∂–µ " + plural_days(result2[1]) )
    

import requests
from random import randint, choice
from datetime import datetime, date
from googletrans import Translator
from telebot import types

translator = Translator()

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    res = cur.execute("SELECT id, value, lastgrow FROM users WHERE id={0}".format(user_id))
    return res.fetchone()

def is_growable(last_grow):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —á–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if last_grow is None:
        return True
    last_grow_date = datetime.strptime(last_grow, "%Y-%m-%d")
    today = date.today()
    delta = datetime(today.year, today.month, today.day) - last_grow_date
    return delta.days != 0

def get_max_grow(result, actual_length):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –¥–ª–∏–Ω—ã —á–ª–µ–Ω–∞"""
    res3 = cur.execute("SELECT id, value, name FROM users ORDER BY value DESC LIMIT 1")
    result3 = res3.fetchone()
    advance_grow = result3[1] - actual_length > 40
    if advance_grow:
        return round((result3[1] - actual_length) / 4)
    else:
        return 10

def update_hall_of_fame(user_id, strike):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ '–ó–∞–ª –°–ª–∞–≤—ã'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ó–∞–ª–µ –°–ª–∞–≤—ã
    res = cur.execute("SELECT id, strike FROM HallOfFame WHERE user_id=?", (user_id,))
    hall_of_fame_entry = res.fetchone()

    if hall_of_fame_entry:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ó–∞–ª–µ –°–ª–∞–≤—ã –∏ –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫ –±–æ–ª—å—à–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        if strike > hall_of_fame_entry[1]:
            query_update = '''
                UPDATE HallOfFame
                SET strike = ?
                WHERE user_id = ?
            '''
            cur.execute(query_update, (strike, user_id))
            con.commit()
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ó–∞–ª–µ –°–ª–∞–≤—ã, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Ç—É–¥–∞
        query_insert = '''
            INSERT INTO HallOfFame (user_id, strike)
            VALUES (?, ?, ?)
        '''
        cur.execute(query_insert, (user_id, strike))
        con.commit()


def update_top_dude():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–æ–ø–µ"""
    today_date = date.today()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    res_top_user = cur.execute("SELECT id, value, name FROM users ORDER BY value DESC LIMIT 1")
    top_user = res_top_user.fetchone()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–æ–ø–µ, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ–π –µ—Å—Ç—å
    res_top_dude = cur.execute("SELECT id, days, lastUpdate FROM topDudes")
    top_dude = res_top_dude.fetchone()

    if top_dude:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–≤—ã–º –∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if top_dude[0] == top_user[0] and top_dude[2] != today_date:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ topDudes –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query_update = '''
                UPDATE topDudes
                SET days = days + 1, lastUpdate = "{0}"
            '''.format(today_date)
            cur.execute(query_update)
            con.commit()
        elif top_dude[0] != top_user[0]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è,
            # –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_hall_of_fame(top_dude[0],top_dude[1])
            query_update_date = '''
                UPDATE topDudes
                SET id = {0}, days = 1, lastUpdate = "{1}"
            '''.format(top_user[0], today_date)
            cur.execute(query_update_date)
            con.commit()
    else:
        # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        query_insert = '''
            INSERT INTO topDudes (id, days, lastUpdate)
            VALUES ({0}, 1, "{1}")
        '''.format(top_user[0], today_date)
        cur.execute(query_insert)
        con.commit()

def update_user_data(result, actual_length, first_name):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    query1 = '''
        UPDATE users
        SET value = {0}, name = "{2}", lastgrow="{3}"
        WHERE id = {1};
        '''.format(actual_length, result[0], first_name, date.today())
    cur.execute(query1)
    con.commit()

def send_grow_message(bot, message, actual_length, Value, DickFullName, GrowOrNo, dickString):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Ä–æ—Å—Ç–µ –¥–ª–∏–Ω—ã —á–ª–µ–Ω–∞"""
    bot.send_message(message.chat.id, "{2} {3} –Ω–∞ {0}—Å–º ! –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {1}—Å–º".format(str(Value), str(actual_length), DickFullName, GrowOrNo))
    bot.send_message(message.chat.id, "–ß–ª–µ–Ω {0.first_name} –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n  {1}".format(message.from_user, dickString))
    response = requests.get("http://numbersapi.com/" + str(actual_length))
    text_Eng = response.text
    text_Rus = translator.translate(text_Eng, dest='ru').text
    bot.send_message(message.chat.id, text_Rus)

def send_death_message(bot, message, actual_length, DickFullName, GrowOrNo, dickString):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ —á–ª–µ–Ω–∞"""
    bot.send_message(message.chat.id, "{2} {3} –æ—Ç–≤–∞–ª–∏–ª—Å—è ! –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {1}—Å–º".format(str(Value), str(actual_length), DickFullName, GrowOrNo))
    bot.send_message(message.chat.id, "–ß–ª–µ–Ω {0.first_name} –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n  {1}".format(message.from_user, dickString))

@bot.message_handler(commands=['dick'])
def pistrun(message):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        result = user_data
        AllowGrow = is_growable(result[2])
        if not AllowGrow:
            DickName = choice(ArrayOfDickNames).lower()
            DickFullName = WomanOrMen(DickName) +" "+ DickName
            bot.send_message(message.chat.id, "{0} –æ—Ç–¥—ã—Ö–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞".format(DickFullName))
        else:
            DickName = choice(ArrayOfDickNames).lower()
            DickFullName = WomanOrMen(DickName) +" "+ DickName
            actualLength = int(result[1])
            res3 = cur.execute("SELECT id,value,name FROM users ORDER BY value DESC LIMIT 1")
            result3 = res3.fetchone()
            
            maxGrow = get_max_grow(result, actualLength)
            Value = randint(-10, maxGrow) if randint(1, 100) <= 10 else randint(0, maxGrow)
            GrowOrNo = "—É–≤–µ–ª–∏—á–∏–ª—Å—è" if Value >= 0 else "—É–º–µ–Ω—å—à–∏–ª—Å—è"
            actualLength += Value
            death = randint(1, 100) == 1
            #update_top_dudes(result,result3, actualLength)
            update_user_data(result, actualLength, message.from_user.first_name)
            dickString = getDickLenght(actualLength)
            if not death:
                send_grow_message(bot, message, actualLength, Value, DickFullName, GrowOrNo, dickString)
            else:
                send_death_message(bot, message, actualLength, DickFullName, GrowOrNo, dickString)
    else:
        DickName = choice(ArrayOfDickNames).lower()
        DickFullName = WomanOrMen(DickName) +" "+ DickName
        bot.send_message(message.chat.id, "–Ø {0} –µ—â–µ –Ω–µ –∑–Ω–∞—é, —â–∞—Å –∑–∞–ø–∏—à—É...".format(DickFullName.lower()))
        Value = randint(1, 15)
        dickString = getDickLenght(Value)
        cur.execute("""
            INSERT INTO users VALUES
                ({0}, {1}, "{2}","","","{3}",0,"{4}")
        """.format(message.from_user.id, Value, message.from_user.first_name, date.today(), date.today()))
        con.commit()
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, {0.first_name}! {2} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {1}—Å–º".format(message.from_user, str(Value), DickFullName), reply_markup=markup)
        bot.send_message(message.chat.id, "–ß–ª–µ–Ω {0.first_name} –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: \n {1}".format(message.from_user, dickString))



@bot.message_handler(commands=['duel'])
def duel_command(message):

    print(message.chat.id)
    if message.chat.id != -1002101471139:
        bot.reply_to(message, "–ò–¥–∏-–∫–∞ —Ç—ã –Ω–∞—Ö—É–π, –Ω–∞–µ–±–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è")
        return

    if len(message.text.split()) != 2 and len(message.text.split()) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /duel [–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥—É—ç–ª—å
    challenged_name = message.text.split()[1]
    
    
    if len(message.text.split()) == 3:
        debt =  message.text.split()[2]
    else:
        debt = "5"
        
    if int(debt) > 50:
        bot.reply_to(message, "–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ 50")
        return
    if int(debt) < 0:
        bot.reply_to(message, "–°—É–∫–∞ –Ω—É —Ç—ã  –¥—É—Ä–∞–∫? –ù–∞—Ö—É—è –≤–æ—Ç –º–Ω–µ –¥—É–º–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π —Ç–æ —á—É—à–ø–∞–Ω –Ω–∞–ø–∏—à–µ—Ç —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω—É–ª—è")
        return
        
        
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥—É—ç–ª—å
    cur.execute("SELECT id FROM users WHERE name=?", (challenged_name,))
    row = cur.fetchone()
    if row is None:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {challenged_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    challenged_id = row[0]


    
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥—É—ç–ª—å
    challenger_id = message.from_user.id
    cur.execute("SELECT value FROM users WHERE id=?", (challenged_id,))
    actualDick = cur.fetchone()[0]
    if int(actualDick) < int(debt):
        bot.reply_to(message, "–£ —Ç–µ–±—è –∏—Ç–∞–∫ –¥–æ–ª–≥, –∫—É–¥–∞ –µ—â–µ –±–æ–ª—å—à–µ")
        return
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥—É—ç–ª—å
    cur.execute("SELECT id FROM users WHERE name=?", (challenged_name,))
    row = cur.fetchone()
    if row is None:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {challenged_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    challenged_id = row[0]
    
    if challenged_id == challenger_id:
        bot.reply_to(message, f"ü§°")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—É duels —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–∂–∏–¥–∞–Ω–∏–µ"
    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ –Ω–∞ –¥—É—ç–ª—å –∏ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å, –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
    markup = telebot.types.InlineKeyboardMarkup()
    accept_button = telebot.types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úî", callback_data='accept')
    decline_button = telebot.types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è ‚ùå", callback_data='decline')
    markup.row(accept_button, decline_button)
    msg = bot.send_message(message.chat.id, f"[{challenged_name}](tg://user?id={challenged_id}) –≤–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç –Ω–∞ –¥—É—ç–ª—å üé≤ –°—Ç–∞–≤–∫–∞: {debt}", reply_markup=markup, parse_mode='MarkdownV2')
    cur.execute("INSERT INTO duels (id,challenger_id, challenged_id, status) VALUES (?,?, ?, ?)", (msg.message_id,challenger_id, challenged_id, "–û–∂–∏–¥–∞–Ω–∏–µ"))
    con.commit()
    
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å, –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥—É—ç–ª—å
    print(call.message.message_id)
    cur.execute("SELECT challenger_id,challenged_id FROM duels WHERE id=?", (call.message.message_id,))
    duel_data = cur.fetchone()
    

    
    if duel_data:
        challenger_id, challenged_id = duel_data
        debt = call.message.text
        debt = int(debt.split("–°—Ç–∞–≤–∫–∞: ",1)[1])
        cur.execute("SELECT name FROM users WHERE id=?", (challenged_id,))
        challenged_name = cur.fetchone()[0]
        
        cur.execute("SELECT name FROM users WHERE id=?", (challenger_id,))
        challenger_name = cur.fetchone()[0]
        
        if call.data == 'accept':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–∏–Ω—è—Ç—å, –∏ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç, –∫–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –∏–≥—Ä—É
            if user_id == challenged_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "–ò–¥–µ—Ç –∏–≥—Ä–∞"
                cur.execute("UPDATE duels SET status=? WHERE id=?", ("–ò–¥–µ—Ç –∏–≥—Ä–∞", call.message.message_id))
                con.commit()
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n{challenger_name} –ø—Ä–æ—Ç–∏–≤ {challenged_name}")
                data = bot.send_dice(call.message.chat.id, emoji='üé≤', reply_to_message_id  = call.message.message_id)
                data2 = bot.send_dice(call.message.chat.id, emoji='üé≤', reply_to_message_id  = call.message.message_id)
                sleep(2.8)
                result_challenger = data.dice.value
                result_challenged = data2.dice.value
                if result_challenger > result_challenged:
                    cur.execute("UPDATE users SET value = value + ? WHERE id=?", (debt,challenger_id,))
                    cur.execute("UPDATE users SET value = value - ? WHERE id=?", (debt,challenged_id,))
                    bot.reply_to(call.message, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {challenger_name}")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚úî\n{challenger_name} –ø—Ä–æ—Ç–∏–≤ {challenged_name}\n----------\n–ò—Ç–æ–≥: {challenger_name} - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.")
                    
                elif result_challenged == result_challenger:
                    bot.reply_to(call.message, f"–ù–∏—á—å—è!")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚úî\n{challenger_name} –ø—Ä–æ—Ç–∏–≤ {challenged_name}\n----------\n–ò—Ç–æ–≥: –ù–∏—á—å—è")
                else:
                    

                    cur.execute("UPDATE users SET value = value - ? WHERE id=?", (debt,challenger_id,))
                    cur.execute("UPDATE users SET value = value + ? WHERE id=?", (debt,challenged_id,))
                    bot.reply_to(call.message, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {challenged_name}\n")
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=f"–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å ‚úî\n{challenger_name} –ø—Ä–æ—Ç–∏–≤ {challenged_name}\n----------\n–ò—Ç–æ–≥: {challenged_name} - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.")
                cur.execute("UPDATE duels SET status=? WHERE id=?", ("–ó–∞–≤–µ—Ä—à–µ–Ω–∞", call.message.message_id))
                con.commit()
            else:
                bot.send_message(call.message.chat.id, f"ü§° {call.from_user.first_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤–∞—Å –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å.")
        elif call.data == 'decline':
            if user_id == challenged_id:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è inline –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç "–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞"
                cur.execute("UPDATE duels SET status=? WHERE id=?", ("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", call.message.message_id))
                con.commit()
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
            else:
                bot.send_message(call.message.chat.id, f"ü§° {call.from_user.first_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤–∞—Å –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∏")




@bot.message_handler(commands=['fact'])
def getFact(message):
    Number = "228"
    
    response = requests.get("http://numbersapi.com/228")

    
    text_Eng = response.text
    text_Rus = GoogleTranslator(source='auto', target='ru').translate(text_Eng)
    bot.send_message(message.chat.id, text_Rus)
    
 
@bot.message_handler(commands=['all'])
def getFact(message):
     
    bot.send_message(message.chat.id, "[–ê—Ä—Ç–µ–º](tg://user?id=1063677223), [–°–∞—à–∞](tg://user?id=1473377894),[–§–∏–ª—è](tg://user?id=108150618),[–ù–∏–∫–∏—Ç–∞](tg://user?id=917793861),[–ü–∞—à–∞](tg://user?id=495605727),[–°–µ—Ä–∞—Ñ–∏–º](tg://user?id=1193757607),[–§–æ–∫–∞](tg://user?id=822344339),[–ê—Ä—Ç–µ–º](tg://user?id=1063677223),[–î–µ–Ω—á–∏–∫](tg://user?id=680793601) \- –í–∞—Å –≤—ã–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä", parse_mode='MarkdownV2')
       
@bot.message_handler(commands=['change'])
def add_length(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–π–¥–∏ 696969
    if message.from_user.id != 1063677223:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–π–¥–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    try:
        _, user_id, increase_value = message.text.split()
        user_id = str(user_id)
        increase_value = int(increase_value)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /change <name> <value>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–π–¥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    res = cur.execute("SELECT id, value, name FROM users WHERE name=?", (user_id,))
    result = res.fetchone()
    if result is None:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_value = result[1] + increase_value
    query = '''
            UPDATE users
            SET value = ?
            WHERE name = ?;
            '''
    cur.execute(query, (new_value, user_id))
    con.commit()

    bot.send_message(message.chat.id, f"–î–ª–∏–Ω–∞ —á–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result[2]} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {increase_value} —Å–º. –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞: {new_value} —Å–º.")

def get_combo_text(dice_value: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ –±—ã–ª–æ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∞–π—Å–µ-–∫–∞–∑–∏–Ω–æ
    :param dice_value: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–π—Å–∞ (—á–∏—Å–ª–æ)
    :return: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –≤—ã–ø–∞–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞

    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—â—ë —Ä–∞–∑ —Å–ø–∞—Å–∏–±–æ t.me/svinerus):
        return [casino[(dice_value - 1) // i % 4]for i in (1, 4, 16)]
    """
    #           0       1         2        3
    values = ["BAR", "–≤–∏–Ω–æ–≥—Ä–∞–¥", "–ª–∏–º–æ–Ω", "—Å–µ–º—å"]

    dice_value -= 1
    result = []
    for _ in range(3):
        result.append(values[dice_value % 4])
        dice_value //= 4
    return result

@bot.message_handler(commands=['slot'])
def slot(message):
    
    bot.send_message(message.chat.id, message.from_user.first_name + " –∫—Ä—É—Ç–∏—Ç —Ä—É–ª–µ—Ç–∫—É..." )
    
    res = cur.execute("SELECT id, value, name, casino, casinodate FROM users WHERE name=?", (message.from_user.first_name,))
    result = res.fetchone()
    if result is None:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    tickets = result[3]
    
    Time = date.today()
    
    AllowGrow = True
    if result[4] is not None:
        LastGrow = datetime.strptime(result[4],"%Y-%m-%d")

        Today = date.today()

        Delta = datetime(Today.year, Today.month, Today.day) - LastGrow

        if Delta.days == 0:
            AllowGrow = False
    else:
        
        query = '''
            UPDATE users
            SET casinodate = ?
            WHERE name = ?;
            '''
        cur.execute(query, (Time, message.from_user.first_name))
        con.commit()
        tickets = 0
        
    if AllowGrow == True:
        tickets = 0
        Time = date.today()
        query = '''
            UPDATE users
            SET casinodate = ?
            WHERE name = ?;
            '''
        cur.execute(query, (Time, message.from_user.first_name))
        con.commit()

    
    
    if tickets >= 5:
        bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –∫—Ä—É—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    new_value = result[1] - 1
    tickets = tickets + 1
    query = '''
            UPDATE users
            SET value = ?, casino = ?
            WHERE name = ?;
            '''
    cur.execute(query, (new_value,tickets, message.from_user.first_name))
    con.commit()
    
    grow = True
    data = bot.send_dice(message.chat.id, emoji='üé∞')
    sleep(1.5)
    resultCombo = get_combo_text(data.dice.value)
    if resultCombo[0] == "—Å–µ–º—å" and resultCombo[0] == resultCombo[1] and resultCombo[0] == resultCombo[2]: # –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏
        text = "–î–ñ–ï–ö–ü–û–¢! –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 7—Å–º"
        new_value = int(result[1]) + 8
    elif resultCombo[0] == "—Å–µ–º—å" and resultCombo[0] == resultCombo[1]:                          # –î–≤–µ —Å–µ–º–µ—Ä–∫–∏
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 5 —Å–º."
        new_value = int(result[1]) + 6
    elif resultCombo[0] == "BAR" and  resultCombo[0] == resultCombo[1] and resultCombo[0] == resultCombo[2]: # –¢—Ä–∏ –±–∞—Ä–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏... –ù–æ –Ω–µ —Ç–æ —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å,  –≤–∞—à –ø–∏—Å—é–Ω —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ 5 —Å–º."
        new_value = int(result[1]) - 4
    elif resultCombo[0] == "BAR" and  resultCombo[0] == resultCombo[1]:                                         # –î–≤–∞ –±–∞—Ä–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 3 —Å–º."
        new_value = int(result[1]) + 4
    elif resultCombo[0] == "–≤–∏–Ω–æ–≥—Ä–∞–¥" and  resultCombo[0] == resultCombo[1] and resultCombo[0] == resultCombo[2]: # –¢—Ä–∏ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 4 —Å–º."
        new_value = int(result[1]) + 5
    elif resultCombo[0] == "–≤–∏–Ω–æ–≥—Ä–∞–¥" and  resultCombo[0] == resultCombo[1]:                                         # –î–≤–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 2 —Å–º."
        new_value = int(result[1]) + 3
    elif resultCombo[0] == "–ª–∏–º–æ–Ω" and  resultCombo[0] == resultCombo[1] and resultCombo[0] == resultCombo[2]:  # –¢—Ä–∏ –ª–∏–º–æ–Ω–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 6 —Å–º."
        new_value = int(result[1]) + 7
    elif resultCombo[0] == "–ª–∏–º–æ–Ω" and  resultCombo[0] == resultCombo[1]:                                         # –î–≤–∞ –ª–∏–º–æ–Ω–∞
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 3 —Å–º."
        new_value = int(result[1]) + 4
    elif resultCombo[1] == "BAR" and  resultCombo[1] == resultCombo[2]:                                         # –î–≤–∞ –±–∞—Ä–∞ —Å–∑–∞–¥–∏
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 3 —Å–º."
        new_value = int(result[1]) + 4
    elif resultCombo[1] == "–≤–∏–Ω–æ–≥—Ä–∞–¥" and  resultCombo[1] == resultCombo[2]:                                         # –î–≤–∞ –≤–∏–Ω–æ–≥—Ä–∞–¥–∞ —Å–∑–∞–¥–∏
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 3 —Å–º."
        new_value = int(result[1]) + 4
    elif resultCombo[1] == "–ª–∏–º–æ–Ω" and  resultCombo[1] == resultCombo[2]:                                         # –î–≤–∞ –ª–∏–º–æ–Ω–∞ —Å–∑–∞–¥–∏
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 3 —Å–º."
        new_value = int(result[1]) + 4
    elif resultCombo[1] == "—Å–µ–º—å" and resultCombo[1] == resultCombo[2]:                          # –î–≤–µ —Å–µ–º–µ—Ä–∫–∏ C –ñ–û–ü–´ –ß–¢–û–ë–´ –¢–ï–¢–ï –°–ê–®–ï –ë–´–õ–û –ü–†–ò–Ø–¢–ù–û
        text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏. –í–∞—à –ø–∏—Å—é–Ω —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ 5 —Å–º."
        new_value = int(result[1]) + 6
    elif resultCombo[0] == resultCombo[2]:
        text = "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
        new_value = result[1] + 1
    else:
        text = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–∏—Å—é–Ω —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ 1—Å–º"
        grow = False

    if grow == True:
        query = '''
        UPDATE users
        SET value = ?
        WHERE name = ?;
        '''
        cur.execute(query, (new_value, message.from_user.first_name))
        con.commit()
            
    
    
    bot.send_message(message.chat.id, text )
  

@bot.message_handler(func=lambda message: True)
def echo_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    print(message.text)
    messageText = message.text.lower().replace("?", "")
    messageText = messageText.replace(".", "")
    messageText = messageText.replace("!", "")
    
    if messageText == "—É—Ä–∞":
        bot.reply_to(message, "–£—Ä–∞!")
        
    elif messageText == "–¥–∞":
        bot.reply_to(message, "–ü–∏–∑–¥–∞")
    elif messageText == "–Ω–µ—Ç":
        bot.reply_to(message, "–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç")
        
    elif messageText == "–≥–¥–µ":
        bot.reply_to(message, "–í –ø–∏–∑–¥–µ")
        
    elif messageText == "—á–µ":
        bot.reply_to(message, "–•—É–π —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ")
        
    elif messageText == "—á—ë":
        bot.reply_to(message, "–•—É–π —á–µ—Ä–µ–∑ –ø–ª–µ—á–æ")
    
    elif messageText == "—Å—Ç—Ä–∞–Ω–Ω–æ":
        bot.reply_to(message, "–û—á–µ–Ω—å")
    
    elif messageText == "–¥–µ–Ω—á–∏–∫":
        bot.reply_to(message, "–•—É–µ–Ω—á–∏–∫")
    elif messageText == "–¥—ç–Ω–∏—Å":
        bot.reply_to(message, "–ü—ç–Ω–∏—Å")
    elif messageText == "–¥–µ–Ω–∏—Å":
        bot.reply_to(message, "–ü–µ–Ω–∏—Å")
    elif messageText == "—Å–∞—à–∫–∞":
        bot.reply_to(message, "–•—É—è—à–∫–∞")
    elif messageText == "–ø–∞—à–∫–∞":
        bot.reply_to(message, "–•—É—è—à–∫–∞")
    elif messageText == "—Ñ–∏–ª—è":
        bot.reply_to(message, "–•—É–∏–ª—è")
    elif messageText == "–Ω–∏–∫–∏—Ç–∞":
        bot.reply_to(message, "–•—É–∏ÃÅ—Ç–∞")
    elif messageText == "–Ω–∏–∫–∏—Ç–∫–∞":
        bot.reply_to(message, "–•—É–∏ÃÅ—Ç–∫–∞")
    elif messageText == "–∞—Ä—Ç–µ–º":
        bot.reply_to(message, "–ì–∞–Ω–¥–æ–Ω")
    elif messageText == "–∞—Ä—Ç—ë–º":
        bot.reply_to(message, "–ì–∞–Ω–¥–æ–Ω")
    elif messageText == "–ø–∏–¥–æ—Ä":
        bot.reply_to(message, "–ê—Å—É–∂–¥–∞—é")
    elif messageText == "—Ñ–æ–∫–∞":
        bot.reply_to(message, "–•—É—ë–∫–∞")
    elif messageText == "—Ñ–æ–∫–∏–Ω—Å":
        bot.reply_to(message, "–•—É—ë–∫–∏–Ω—Å")
    elif messageText == "–¥–∞–Ω–µ—á–∫–∞":
        bot.reply_to(message, "–•—É—è–Ω–µ—á–∫–∞")
    elif messageText == "–ø–∞–≤–µ–ª":
        bot.reply_to(message, "–•—É—è–≤–µ–ª")
    elif messageText == "–ø–∞–≤–µ–ª":
        bot.reply_to(message, "–•—É—è–≤–µ–ª")
    elif messageText == "—Å–µ—Ä–∞—Ñ–∏–º–∫–∞":
        bot.reply_to(message, "–•—É–∏–Ω–∫–∞")
    elif messageText == "–¥–µ–Ω—á–∏–∫":
        bot.reply_to(message, "–•—É–µ–Ω—á–∏–∫")
    elif messageText == "–¥—ç–Ω—á–∏–∫":
        bot.reply_to(message, "–•—É–µ–Ω—á–∏–∫")
    elif messageText == "—Å–∞—à–∞":
        bot.reply_to(message, "–•—É—è—à–∞")
    elif messageText == "–æ—Ä—Ç–µ–º":
        bot.reply_to(message, "–ì–∞–Ω–¥–æ–Ω?")
        
 
@bot.message_handler(func=lambda message: True, content_types=['left_chat_member'])
def handle_left_chat_member(message):
    left_user = message.left_chat_member
    bot.reply_to(message, f"{left_user.first_name} —Å—ä–µ–±–∞–ª —Å –ø–æ–∑–æ—Ä–æ–º.")
 


						
while True:
    try:
        #bot.send_message("-1002101471139", "#–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å")
        bot.polling(none_stop=True)
    except Exception as _ex:
        print(_ex)
        sleep(3)


